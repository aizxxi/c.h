local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local platform = nil
local isActive = false
local currentHeight = 0
local elevationSpeed = 0.02
local baseHeight = 0.5
local platformSize = Vector3.new(8, 0.5, 8)
local elevationConnection = nil

-- Create GUI
local function createGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PlatformToggleGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 200, 0, 100)
    mainFrame.Position = UDim2.new(0, 20, 0, 20)
    mainFrame.BackgroundColor3 = Color3.new(0, 0, 0)  -- fully black
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true  -- make GUI draggable
    mainFrame.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "C.H Premium"  -- updated name
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0.8, 0, 0, 40)
    toggleButton.Position = UDim2.new(0.1, 0, 0.4, 0)
    toggleButton.BackgroundColor3 = Color3.new(0, 0, 0)  -- fully black
    toggleButton.Text = "OFF"
    toggleButton.TextColor3 = Color3.new(1, 1, 1)
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Parent = mainFrame

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = toggleButton

    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, 0, 0, 20)
    statusLabel.Position = UDim2.new(0, 0, 0.8, 0)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Height: 0 studs"  -- updated label
    statusLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.Parent = mainFrame

    return toggleButton, statusLabel
end

-- Platform functions
local function createPlatform()
    if platform then
        platform:Destroy()
    end
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    local rootPart = character.HumanoidRootPart
    local position = rootPart.Position

    platform = Instance.new("Part")
    platform.Name = "ElevatorPlatform"
    platform.Size = platformSize
    platform.Material = Enum.Material.Neon
    platform.Transparency = 1  -- fully transparent
    platform.CanCollide = true
    platform.Anchored = true
    platform.Position = Vector3.new(
        position.X,
        position.Y - (character.Humanoid.HipHeight + baseHeight + platformSize.Y/2),
        position.Z
    )
    platform.Parent = workspace
    currentHeight = 0
end

local function removePlatform()
    if platform then
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(platform, tweenInfo, {
            Transparency = 1,
            Size = Vector3.new(0.1, 0.1, 0.1)
        })
        tween:Play()
        tween.Completed:Connect(function()
            platform:Destroy()
            platform = nil
        end)
    end
    currentHeight = 0
end

local function updatePlatform()
    if platform and platform.Parent then
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local rootPart = character.HumanoidRootPart
            currentHeight = currentHeight + elevationSpeed
            local baseY = rootPart.Position.Y - (character.Humanoid.HipHeight + baseHeight + platformSize.Y/2)
            local newY = baseY + currentHeight
            platform.Position = Vector3.new(rootPart.Position.X, newY, rootPart.Position.Z)
        end
    end
end

local function togglePlatform(button, statusLabel)
    isActive = not isActive
    if isActive then
        button.Text = "ON"
        button.BackgroundColor3 = Color3.new(0, 0, 0)  -- keep fully black
        createPlatform()
        elevationConnection = RunService.Heartbeat:Connect(function()
            updatePlatform()
            statusLabel.Text = string.format("Height: %.1f studs", currentHeight)
        end)
    else
        button.Text = "OFF"
        button.BackgroundColor3 = Color3.new(0, 0, 0)  -- keep fully black
        if elevationConnection then
            elevationConnection:Disconnect()
            elevationConnection = nil
        end
        removePlatform()
        statusLabel.Text = "Height: 0 studs"
    end
end

-- Main
local function main()
    if not player.Character then
        player.CharacterAdded:Wait()
    end
    local toggleButton, statusLabel = createGUI()
    toggleButton.MouseButton1Click:Connect(function()
        togglePlatform(toggleButton, statusLabel)
    end)

    player.CharacterRemoving:Connect(function()
        if elevationConnection then
            elevationConnection:Disconnect()
            elevationConnection = nil
        end
        removePlatform()
        isActive = false
    end)

    player.CharacterAdded:Connect(function()
        wait(1)
        if isActive then
            createPlatform()
        end
    end)
end

main()
